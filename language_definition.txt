PROGRAM = { CONSTRUCTION } .
CONSTRUCTION = FUNCTION | VAR_DECLARATION .
STATEMENT = DECLARATION | (EXPRESSION ";") | COMMAND | ";" .
STATEMENT_BLOCK = "{" { STATEMENT } "}" 
FUNCTION = ( DEF_TYPE | "void" ) NAME "(" ((VAR_DECLARATION { "," VAR_DECLARATION) | "void") }  ")" STATEMENT_BLOCK .
VAR_DECLARATION = DEF_TYPE NAME { "[" NUMBER "]" } .
DECLARATION = DEF_TYPE NAME [ "=" EXPRESSION ] { "," NAME [ "=" EXPRESSION ] } ";" .

EXPRESSION = ({ "(" } EXPRESSION { ")" }) | BINARY_EXPRESSION | ASSIGNMENT_EXPRESSION | UNARY_EXPRESSION | VALUE |FUNC_CALL| ( EXPRESSION { "," EXPRESSION } ) .
VALUE = NAME | ( NAME "[" EXPRESSION "]" ) | NUMBER  .
ASSIGNMENT_EXPRESSION = NAME "=" EXPRESSION .
BINARY_EXPRESSION = EXPRESSION BINARY_OPERATOR EXPRESSION .
UNARY_EXPRESSION = ( PRE_UNARY_OPERATOR EXPRESSION ) | ( EXPRESSION POS_UNARY_OPERATOR ) .
PRE_UNARY_OPERATOR = "!" | "~" | "++" | "--" | "*" | "&" | ( "(" DEF_TYPE ")" )  ) .
POS_UNARY_OPERATOR = "++" | "--" .
BINARY_OPERATOR = "==" | ">" | ">=" | "<" | "<=" | "+" | "-" | "*" | "/" | "%" | "&&" | "||" | "&"  | "|" | "^" .
FUNC_CALL = NAME "(" [ EXPRESSION { "," EXPRESSION } ] ")"

COMMAND = BRANCH | LOOP .
BRANCH = "if(" EXPRESSION ")" ( STATEMENT_BLOCK | STATEMENT ) { "else" ( BRANCH | ( STATEMENT_BLOCK | STATEMENT ))  .
LOOP = FOR | WHILE | DO_WHILE .
FOR = "for(" DECLARATION ";" EXPRESSION ";" EXPRESSION ")" ( STATEMENT_BLOCK | STATEMENT ) .
WHILE = "while(" EXPRESSION ")" ( STATEMENT_BLOCK | STATEMENT ) .
DO_WHILE = "do" ( STATEMENT_BLOCK | STATEMENT ) "while(" EXPRESSION ");" .


DEF_TYPE = TYPE { "*" }
NAME = ( LETTER | "_" ) { ALPHANUMERIC_CHAR } .
NUMBER = NUMERIC_CHAR { NUMERIC_CHAR } .
TYPE = ( "int" | "char" ) 
